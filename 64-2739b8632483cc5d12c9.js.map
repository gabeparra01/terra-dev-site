{"version":3,"sources":["webpack:///./lib/terra-dev-site/test/mdxMarkdown/InlineHtml.test.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"+tBAOA,IAKMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,OAAO,cAACH,EAAD,KAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,yGACA,wBACF,2CACA,8DACA,4CACA,mEAA4C,gCAA5C,OAMFH,EAAWI,gBAAiB","file":"64-2739b8632483cc5d12c9.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`You can also use raw HTML in your Markdown, and it'll mostly work pretty well.`}</p>\n    <dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n    </dl>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}