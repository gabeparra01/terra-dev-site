(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{799:function(n,e,a){n.exports={marked:"marked-module__marked___361eJ"}},843:function(n,e,a){"use strict";a.r(e);var s=a(0),t=a.n(s),o=a(2),i=a.n(o),p=a(799),c=a.n(p),r=i.a.bind(c.a);e.default=function(){return t.a.createElement("div",{dir:"ltr",className:r("marked"),dangerouslySetInnerHTML:{__html:'<h1 id="getting-started"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#getting-started"><span class="icon icon-link" /></a>Getting Started</h1><p>Terra-dev-site offers a quick site to host test examples and documentation for your react components or markdown documentation.</p>\n<h2 id="quick-start"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#quick-start"><span class="icon icon-link" /></a>Quick start</h2><h3 id="installation"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#installation"><span class="icon icon-link" /></a>Installation</h3><pre><code class="codeblock language-bash">npm install --save-dev terra-dev-site</code></pre>\n<h2 id="peer-dependencies"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#peer-dependencies"><span class="icon icon-link" /></a>Peer Dependencies</h2><p>This component requires the following peer dependencies be installed in your app for the component to properly function.</p>\n<table>\n<thead>\n<tr>\n<th>Peer Dependency</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>react</td>\n<td>^16.8.5</td>\n</tr>\n<tr>\n<td>react-dom</td>\n<td>^16.8.5</td>\n</tr>\n<tr>\n<td>terra-toolkit</td>\n<td>^5.2.0</td>\n</tr>\n<tr>\n<td>webpack</td>\n<td>^4.28.1</td>\n</tr>\n</tbody></table>\n<h3 id="prerequisites"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#prerequisites"><span class="icon icon-link" /></a>Prerequisites</h3><ul>\n<li>README.md in the root project directory</li>\n<li>Package.json in the root project directory</li>\n<li>es6 code in src</li>\n<li>transpiled code in lib</li>\n<li>babel 7.5 is required to transpile the <code>dev-site-config/build</code> folder at webpack time.</li>\n</ul>\n<h3 id="running-terra-dev-site"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#running-terra-dev-site"><span class="icon icon-link" /></a>Running terra-dev-site</h3><p>Using the TerraDevSite webpack plugin, a static site will be built to the <code>dev-site-config/build</code> directory and can be served using either <code>webpack-dev-server</code>, <code>tt-serve</code> or served statically using something like gh-pages. A simple example consuming the webpack plugin is shown below. Extending from terra-toolkit&#39;s webpack config is highly recommended.</p>\n<pre><code class="codeblock language-javascript"><span class="token keyword">const</span> toolkitWebpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'terra-toolkit/config/webpack/webpack.config\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-merge\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> TerraDevSite<span class="token punctuation">,</span> TerraDevSiteEntrypoints <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'terra-dev-site\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n* Generates the file representing app name configuration.\n*/</span>\n<span class="token keyword">const</span> <span class="token function-variable function">devSiteConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> argv <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> production <span class="token operator">=</span> argv<span class="token punctuation">.</span>p<span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> TerraDevSiteEntrypoints<span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">TerraDevSite</span><span class="token punctuation">(</span><span class="token punctuation">{</span> env <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">DirectorySwitcherPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          shouldSwitch<span class="token punctuation">:</span> <span class="token operator">!</span>production<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">LocalPackageAliasPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">webpackConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">toolkitWebpackConfig</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">devSiteConfig</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackConfig<span class="token punctuation">;</span></code></pre>\n<p>To serve using <code>tt-serve</code>, add the following terra-toolkit command to your package.json. See the <a href="https://github.com/cerner/terra-toolkit/tree/master/scripts/serve#cli">tt-serve docs</a> for more information on the command options.</p>\n<pre><code class="codeblock language-json">{\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;tt-serve\n  }\n}</code></pre>\n<h3 id="quick-start"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#quick-start"><span class="icon icon-link" /></a>Quick Start</h3><p>After adding the start command to your package.json, run it and navigate to <a href="http://localhost:8080/#/site">http://localhost:8080/#/site</a> to view the site in your browser:</p>\n<pre><code class="codeblock language-bash">npm run start</code></pre>\n<p>You will see your readme hosted on the site. Next lets add some pages.</p>\n<p>Terra-dev-site will auto discover files base on either the default search patterns in the site.config or the file structure and file extensions used.</p>\n<p>Add the following file to: <code>&lt;package&gt;/src/terra-dev-site/my-first-page.doc.md</code></p>\n<pre><code class="codeblock language-md">My first page!</code></pre>\n<p>Then re-run the site and navigate to it in your browser:</p>\n<pre><code class="codeblock language-bash">npm run start</code></pre>\n<p>Now you should be able to see your page under the components tab.</p>\n<h2 id="auto-page-discovery"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#auto-page-discovery"><span class="icon icon-link" /></a>Auto Page Discovery</h2><p>By default terra-dev-site will look for files in the <code>./src/terra-dev-site</code> folder in dev mode and <code>./lib/terra-dev-site</code> for prod mode. In an monorepo it will search for files in <code>./packages/{src,lib}/terra-dev-site</code>. The file directories and file names are used to build the menu navigation of the site.</p>\n<h3 id="directories"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#directories"><span class="icon icon-link" /></a>Directories</h3><p>The directories following the entry point folder (terra-dev-site by default) will be translated into part of the menu structure. The one exception is if you have a &#39;pageType&#39; directory inside the entry point folder, it will be ignored. This lets you group page types together without impacting your site.</p>\n<h3 id="file-naming"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#file-naming"><span class="icon icon-link" /></a>File Naming</h3><p>Files need to be named using the correct &#39;pageType&#39; indicator and file extension to be added to the site. This will allow you to add any additional files to support your examples and only have the specified files added as entries to the site. The file name pattern is:</p>\n<p><code>&lt;filename&gt;.&lt;group&gt;.&lt;pageType&gt;.&lt;extension&gt;</code></p>\n<p>The components of the file name pattern are:</p>\n<ul>\n<li>filename - This is the name that will be added to the side menu for the site. These are sorted alphabetically.</li>\n<li>group - (optional) This allows you to sort menu items. The group is sorted alphabetically.</li>\n<li>pageType - This indicates which primary navigation item the page will be rendered under. The default pageTypes are &#39;home&#39;, &#39;doc&#39;, and &#39;test&#39;.</li>\n<li>extension - .md and .mdx extensions are supported by default. Other extensions can be added by updating the projects webpack config by adding additional extensions to the resolve field.</li>\n</ul>\n<h3 id="auto-discovery-example"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#auto-discovery-example"><span class="icon icon-link" /></a>Auto Discovery Example</h3><p>Given a directory structure like this:</p>\n<pre><code>src/\n  terra-dev-site/\n    doc/\n      upgradeGuide.a.doc.md\n      examples.c/\n        supportingFile.js\n        myGreatExample.doc.jsx\n      example.b.doc.js\n    test/\n      testfile.test.js\n      docInTestFolder.doc.js</code></pre><p>The menu navigation result will be:</p>\n<pre><code>-Components-\n  Upgrade Guide\n  Example\n  Examples &gt;\n     My Great Example\n  Test &gt;\n     Doc In Test Folder\n-Test-\n  Testfile</code></pre><h2 id="path-based-routing-deployments"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#path-based-routing-deployments"><span class="icon icon-link" /></a>Path based routing deployments</h2><p>To support hash routing with path based routing for gh-pages style deployments, you must supply an env variable, <code>TERRA_DEV_SITE_PUBLIC_PATH</code>, describing the path for assets to be served from.</p>\n<p>For example, for a page hosted on github pages with a url of: <a href="http://cerner.github.com/terra-dev-site">http://cerner.github.com/terra-dev-site</a>. The environment variable should be set as follows.</p>\n<pre><code class="codeblock language-bash">TERRA_DEV_SITE_PUBLIC_PATH=&#39;/terra-dev-site/&#39;</code></pre>\n<p>Without the environment variable set assets will assume they are served from <code>/</code> when they should be served from <code>/terra-dev-site/</code></p>\n<h2 id="how-terra-dev-site-works"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#how-terra-dev-site-works"><span class="icon icon-link" /></a>How Terra-Dev-Site Works</h2><p>The terra-dev-site&#39;s webpack plugin calls the pre-build tool <code>generateAppConfig</code>. The generateAppConfig script builds out static configuration to the <code>./dev-site-config/build</code> folder. <code>generateAppConfig</code> also discovers pages based on its configuration. After the static config has been built, webpack continues to run, pulling in the static config and producing the webpack bundle.</p>\n<h2 id="debug"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#debug"><span class="icon icon-link" /></a>Debug</h2><p>To get verbose output, add <code>--env.verboseGenerateAppConfig</code> to your webpack command or run <code>tds-generate-app-config -v</code>.</p>\n<h2 id="further-customization-"><a class="anchor" aria-hidden="true" tabIndex="-1" href="#further-customization-"><span class="icon icon-link" /></a>Further customization:</h2><p>Check out our <a href="http://engineering.cerner.com/terra-dev-site/#/getting-started/terra-dev-site/configuration/site-config">Customization docs</a>.</p>\n'}})}}}]);
//# sourceMappingURL=20-5a3a4767d4e69410b902.js.map